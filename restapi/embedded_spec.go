// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "title": "Schedule API",
    "contact": {},
    "version": "1.0"
  },
  "basePath": "/api",
  "paths": {
    "/next_taking": {
      "get": {
        "description": "Возвращает данные о расписаниях на ближайший период",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "schedule"
        ],
        "summary": "Get next takings",
        "parameters": [
          {
            "type": "integer",
            "description": "user id",
            "name": "user_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schedule.NextTakingResponseDTO"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/httpHandler.errorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/httpHandler.errorResponse"
            }
          }
        }
      }
    },
    "/schedule": {
      "get": {
        "description": "Возвращает данные о выбранном расписании с рассчитанным графиком приёмов на день",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "schedule"
        ],
        "summary": "Get schedule",
        "parameters": [
          {
            "type": "integer",
            "description": "user id",
            "name": "user_id",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "schedule id",
            "name": "schedule_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schedule.ScheduleResponseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/httpHandler.errorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/httpHandler.errorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Создаёт новое расписание",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "schedule"
        ],
        "summary": "Create schedule",
        "parameters": [
          {
            "description": "schedule info",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schedule.CreateScheduleDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schedule.CreateScheduleResponseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/httpHandler.errorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/httpHandler.errorResponse"
            }
          }
        }
      }
    },
    "/schedules": {
      "get": {
        "description": "Возвращает список идентификаторов существующих расписаний для указанного пользователя",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "schedule"
        ],
        "summary": "Get user schedules",
        "parameters": [
          {
            "type": "integer",
            "description": "user id",
            "name": "user_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/httpHandler.errorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/httpHandler.errorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "httpHandler.errorResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        }
      }
    },
    "schedule.CreateScheduleDTO": {
      "type": "object",
      "properties": {
        "duration": {
          "description": "days",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "period": {
          "type": "string",
          "example": "1h30m"
        },
        "user_id": {
          "type": "integer"
        }
      }
    },
    "schedule.CreateScheduleResponseDTO": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        }
      }
    },
    "schedule.NextTakingResponseDTO": {
      "type": "object",
      "properties": {
        "end_at": {
          "type": "string",
          "example": "2025-04-21T22:00:00Z"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "next_taking": {
          "type": "string",
          "example": "2025-04-21T08:00:00Z"
        },
        "period": {
          "type": "string",
          "example": "1h30m"
        }
      }
    },
    "schedule.ScheduleResponseDTO": {
      "type": "object",
      "properties": {
        "end_at": {
          "type": "string",
          "example": "2025-04-21T22:00:00Z"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "period": {
          "type": "string",
          "example": "1h30m"
        },
        "timetable": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "2025-04-21T08:00:00Z"
          ]
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "title": "Schedule API",
    "contact": {},
    "version": "1.0"
  },
  "basePath": "/api",
  "paths": {
    "/next_taking": {
      "get": {
        "description": "Возвращает данные о расписаниях на ближайший период",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "schedule"
        ],
        "summary": "Get next takings",
        "parameters": [
          {
            "type": "integer",
            "description": "user id",
            "name": "user_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/schedule.NextTakingResponseDTO"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/httpHandler.errorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/httpHandler.errorResponse"
            }
          }
        }
      }
    },
    "/schedule": {
      "get": {
        "description": "Возвращает данные о выбранном расписании с рассчитанным графиком приёмов на день",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "schedule"
        ],
        "summary": "Get schedule",
        "parameters": [
          {
            "type": "integer",
            "description": "user id",
            "name": "user_id",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "schedule id",
            "name": "schedule_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schedule.ScheduleResponseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/httpHandler.errorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/httpHandler.errorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Создаёт новое расписание",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "schedule"
        ],
        "summary": "Create schedule",
        "parameters": [
          {
            "description": "schedule info",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/schedule.CreateScheduleDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/schedule.CreateScheduleResponseDTO"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/httpHandler.errorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/httpHandler.errorResponse"
            }
          }
        }
      }
    },
    "/schedules": {
      "get": {
        "description": "Возвращает список идентификаторов существующих расписаний для указанного пользователя",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "schedule"
        ],
        "summary": "Get user schedules",
        "parameters": [
          {
            "type": "integer",
            "description": "user id",
            "name": "user_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/httpHandler.errorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/httpHandler.errorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "httpHandler.errorResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        }
      }
    },
    "schedule.CreateScheduleDTO": {
      "type": "object",
      "properties": {
        "duration": {
          "description": "days",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "period": {
          "type": "string",
          "example": "1h30m"
        },
        "user_id": {
          "type": "integer"
        }
      }
    },
    "schedule.CreateScheduleResponseDTO": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        }
      }
    },
    "schedule.NextTakingResponseDTO": {
      "type": "object",
      "properties": {
        "end_at": {
          "type": "string",
          "example": "2025-04-21T22:00:00Z"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "next_taking": {
          "type": "string",
          "example": "2025-04-21T08:00:00Z"
        },
        "period": {
          "type": "string",
          "example": "1h30m"
        }
      }
    },
    "schedule.ScheduleResponseDTO": {
      "type": "object",
      "properties": {
        "end_at": {
          "type": "string",
          "example": "2025-04-21T22:00:00Z"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "period": {
          "type": "string",
          "example": "1h30m"
        },
        "timetable": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "2025-04-21T08:00:00Z"
          ]
        }
      }
    }
  }
}`))
}
