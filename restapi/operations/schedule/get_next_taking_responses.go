// Code generated by go-swagger; DO NOT EDIT.

package schedule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"schedule/models"
)

// GetNextTakingOKCode is the HTTP code returned for type GetNextTakingOK
const GetNextTakingOKCode int = 200

/*
GetNextTakingOK OK

swagger:response getNextTakingOK
*/
type GetNextTakingOK struct {

	/*
	  In: Body
	*/
	Payload []*models.ScheduleNextTakingResponseDTO `json:"body,omitempty"`
}

// NewGetNextTakingOK creates GetNextTakingOK with default headers values
func NewGetNextTakingOK() *GetNextTakingOK {

	return &GetNextTakingOK{}
}

// WithPayload adds the payload to the get next taking o k response
func (o *GetNextTakingOK) WithPayload(payload []*models.ScheduleNextTakingResponseDTO) *GetNextTakingOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get next taking o k response
func (o *GetNextTakingOK) SetPayload(payload []*models.ScheduleNextTakingResponseDTO) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetNextTakingOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.ScheduleNextTakingResponseDTO, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetNextTakingBadRequestCode is the HTTP code returned for type GetNextTakingBadRequest
const GetNextTakingBadRequestCode int = 400

/*
GetNextTakingBadRequest Bad Request

swagger:response getNextTakingBadRequest
*/
type GetNextTakingBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.HTTPHandlerErrorResponse `json:"body,omitempty"`
}

// NewGetNextTakingBadRequest creates GetNextTakingBadRequest with default headers values
func NewGetNextTakingBadRequest() *GetNextTakingBadRequest {

	return &GetNextTakingBadRequest{}
}

// WithPayload adds the payload to the get next taking bad request response
func (o *GetNextTakingBadRequest) WithPayload(payload *models.HTTPHandlerErrorResponse) *GetNextTakingBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get next taking bad request response
func (o *GetNextTakingBadRequest) SetPayload(payload *models.HTTPHandlerErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetNextTakingBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetNextTakingInternalServerErrorCode is the HTTP code returned for type GetNextTakingInternalServerError
const GetNextTakingInternalServerErrorCode int = 500

/*
GetNextTakingInternalServerError Internal Server Error

swagger:response getNextTakingInternalServerError
*/
type GetNextTakingInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.HTTPHandlerErrorResponse `json:"body,omitempty"`
}

// NewGetNextTakingInternalServerError creates GetNextTakingInternalServerError with default headers values
func NewGetNextTakingInternalServerError() *GetNextTakingInternalServerError {

	return &GetNextTakingInternalServerError{}
}

// WithPayload adds the payload to the get next taking internal server error response
func (o *GetNextTakingInternalServerError) WithPayload(payload *models.HTTPHandlerErrorResponse) *GetNextTakingInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get next taking internal server error response
func (o *GetNextTakingInternalServerError) SetPayload(payload *models.HTTPHandlerErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetNextTakingInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
