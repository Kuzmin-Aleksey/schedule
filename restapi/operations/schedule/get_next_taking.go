// Code generated by go-swagger; DO NOT EDIT.

package schedule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetNextTakingHandlerFunc turns a function with the right signature into a get next taking handler
type GetNextTakingHandlerFunc func(GetNextTakingParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetNextTakingHandlerFunc) Handle(params GetNextTakingParams) middleware.Responder {
	return fn(params)
}

// GetNextTakingHandler interface for that can handle valid get next taking params
type GetNextTakingHandler interface {
	Handle(GetNextTakingParams) middleware.Responder
}

// NewGetNextTaking creates a new http.Handler for the get next taking operation
func NewGetNextTaking(ctx *middleware.Context, handler GetNextTakingHandler) *GetNextTaking {
	return &GetNextTaking{Context: ctx, Handler: handler}
}

/*
	GetNextTaking swagger:route GET /next_taking schedule getNextTaking

# Get next takings

Возвращает данные о расписаниях на ближайший период
*/
type GetNextTaking struct {
	Context *middleware.Context
	Handler GetNextTakingHandler
}

func (o *GetNextTaking) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetNextTakingParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
