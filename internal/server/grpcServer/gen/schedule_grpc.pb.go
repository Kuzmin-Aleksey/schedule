// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: schedule.proto

package schedulev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Schedule_CreateSchedule_FullMethodName = "/schedule.Schedule/CreateSchedule"
	Schedule_GetTimetable_FullMethodName   = "/schedule.Schedule/GetTimetable"
	Schedule_GetByUser_FullMethodName      = "/schedule.Schedule/GetByUser"
	Schedule_GetNextTakings_FullMethodName = "/schedule.Schedule/GetNextTakings"
)

// ScheduleClient is the client API for Schedule service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScheduleClient interface {
	CreateSchedule(ctx context.Context, in *CreateScheduleRequest, opts ...grpc.CallOption) (*CreateScheduleReply, error)
	GetTimetable(ctx context.Context, in *GetTimetableRequest, opts ...grpc.CallOption) (*GetTimetableReply, error)
	GetByUser(ctx context.Context, in *GetByUserRequest, opts ...grpc.CallOption) (*GetByUserReply, error)
	GetNextTakings(ctx context.Context, in *GetNextTakingsRequest, opts ...grpc.CallOption) (*GetNextTakingsReply, error)
}

type scheduleClient struct {
	cc grpc.ClientConnInterface
}

func NewScheduleClient(cc grpc.ClientConnInterface) ScheduleClient {
	return &scheduleClient{cc}
}

func (c *scheduleClient) CreateSchedule(ctx context.Context, in *CreateScheduleRequest, opts ...grpc.CallOption) (*CreateScheduleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateScheduleReply)
	err := c.cc.Invoke(ctx, Schedule_CreateSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleClient) GetTimetable(ctx context.Context, in *GetTimetableRequest, opts ...grpc.CallOption) (*GetTimetableReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTimetableReply)
	err := c.cc.Invoke(ctx, Schedule_GetTimetable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleClient) GetByUser(ctx context.Context, in *GetByUserRequest, opts ...grpc.CallOption) (*GetByUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetByUserReply)
	err := c.cc.Invoke(ctx, Schedule_GetByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleClient) GetNextTakings(ctx context.Context, in *GetNextTakingsRequest, opts ...grpc.CallOption) (*GetNextTakingsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNextTakingsReply)
	err := c.cc.Invoke(ctx, Schedule_GetNextTakings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScheduleServer is the server API for Schedule service.
// All implementations must embed UnimplementedScheduleServer
// for forward compatibility.
type ScheduleServer interface {
	CreateSchedule(context.Context, *CreateScheduleRequest) (*CreateScheduleReply, error)
	GetTimetable(context.Context, *GetTimetableRequest) (*GetTimetableReply, error)
	GetByUser(context.Context, *GetByUserRequest) (*GetByUserReply, error)
	GetNextTakings(context.Context, *GetNextTakingsRequest) (*GetNextTakingsReply, error)
	mustEmbedUnimplementedScheduleServer()
}

// UnimplementedScheduleServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScheduleServer struct{}

func (UnimplementedScheduleServer) CreateSchedule(context.Context, *CreateScheduleRequest) (*CreateScheduleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchedule not implemented")
}
func (UnimplementedScheduleServer) GetTimetable(context.Context, *GetTimetableRequest) (*GetTimetableReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimetable not implemented")
}
func (UnimplementedScheduleServer) GetByUser(context.Context, *GetByUserRequest) (*GetByUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUser not implemented")
}
func (UnimplementedScheduleServer) GetNextTakings(context.Context, *GetNextTakingsRequest) (*GetNextTakingsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextTakings not implemented")
}
func (UnimplementedScheduleServer) mustEmbedUnimplementedScheduleServer() {}
func (UnimplementedScheduleServer) testEmbeddedByValue()                  {}

// UnsafeScheduleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScheduleServer will
// result in compilation errors.
type UnsafeScheduleServer interface {
	mustEmbedUnimplementedScheduleServer()
}

func RegisterScheduleServer(s grpc.ServiceRegistrar, srv ScheduleServer) {
	// If the following call pancis, it indicates UnimplementedScheduleServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Schedule_ServiceDesc, srv)
}

func _Schedule_CreateSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServer).CreateSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Schedule_CreateSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServer).CreateSchedule(ctx, req.(*CreateScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Schedule_GetTimetable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimetableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServer).GetTimetable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Schedule_GetTimetable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServer).GetTimetable(ctx, req.(*GetTimetableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Schedule_GetByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServer).GetByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Schedule_GetByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServer).GetByUser(ctx, req.(*GetByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Schedule_GetNextTakings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextTakingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServer).GetNextTakings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Schedule_GetNextTakings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServer).GetNextTakings(ctx, req.(*GetNextTakingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Schedule_ServiceDesc is the grpc.ServiceDesc for Schedule service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Schedule_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "schedule.Schedule",
	HandlerType: (*ScheduleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSchedule",
			Handler:    _Schedule_CreateSchedule_Handler,
		},
		{
			MethodName: "GetTimetable",
			Handler:    _Schedule_GetTimetable_Handler,
		},
		{
			MethodName: "GetByUser",
			Handler:    _Schedule_GetByUser_Handler,
		},
		{
			MethodName: "GetNextTakings",
			Handler:    _Schedule_GetNextTakings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schedule.proto",
}
